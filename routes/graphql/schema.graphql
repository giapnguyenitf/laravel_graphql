"A datetime string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format 'Y-m-d', e.g. '2011-05-23'."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A email format "
scalar Email @scalar(class: "App\\Http\\GraphQL\\Scalars\\Email")

type Query {
    findPost(id: ID!): Post
    listPosts(title: String, created_at: Date): [Post!]
}

extend type Query {
    findUser(id: ID!): User
    listUsers: [User!]! @paginate(model: "App\\User")
}

type Mutation {
    createUser(
        name: String! @rules(apply: ["required", "max:20"])
        email: String! @rules(apply: ["required", "email"])
        password: String! @rules(apply: ["required"])
    ):User

    createPost(
        title: String @rules(apply: ["required", "max:255"])
        description: String @rules(apply: ["required", "max:500"])
        content: String @rules(apply: ["required", "max:1000"])
        user_id: Int @rules(apply: ["required","exists:users,id"])
    ):Post
}

# User
type User {
    id: ID!
    name: String!
    email: String!
    date_of_birth: Date!
    address: String!
    role: Role!
    posts: [Post!] @hasMany(relation: posts)
}

# Post
type Post implements Profile {
    id: ID!@middleware(checks: ["jwt.auth"])
    title: String!
    description: String!
    content: String!
    views: Int!
    author: User @belongsTo(relation: user),
    comments: [Comment!] @hasMany(relation: comments)
}

# Comment
type Comment {
    id: ID!
    user: User! @belongsTo(relation: user)
    content: String!
    created_at: String!
}

enum Role{
    admin @enum(value: "admin")
    user @enum(value: "user")
}

interface Profile {
    id: ID!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}
